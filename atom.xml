<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Masonnpe&#39;s Blog</title>
  
  <subtitle>愿所有的坚持终不被辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://masonnpe.github.io/"/>
  <updated>2018-10-22T15:31:04.162Z</updated>
  <id>https://masonnpe.github.io/</id>
  
  <author>
    <name>Masonnpe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BASE理论</title>
    <link href="https://masonnpe.github.io/2018/10/22/%E5%88%86%E5%B8%83%E5%BC%8F/BASE%E7%90%86%E8%AE%BA/"/>
    <id>https://masonnpe.github.io/2018/10/22/分布式/BASE理论/</id>
    <published>2018-10-22T15:19:41.257Z</published>
    <updated>2018-10-22T15:31:04.162Z</updated>
    
    <content type="html"><![CDATA[<p>BASE理论是对CAP理论中一致性和可用性权衡的结果，如果无法做到强一致性，那就要采取合适的方法使系统达到最终一致性。传统的数据库系统要求强一致性(ACID)，BASE理论强调通过牺牲强一致性来达到可用性。在实际业务场景中，要结合业务对一致性的要求，将ACID和BASE结合起来使用。</p><h2 id="基本可用-BasicallyAvailable"><a href="#基本可用-BasicallyAvailable" class="headerlink" title="基本可用(BasicallyAvailable)"></a>基本可用(BasicallyAvailable)</h2><p>分布式系统在出现故障的时候，保证核心功能可用，允许损失部分可用性。</p><h2 id="软状态-SoftState"><a href="#软状态-SoftState" class="headerlink" title="软状态(SoftState)"></a>软状态(SoftState)</h2><p>允许系统中的数据存在中间状态，即系统不同节点的数据副本之间进行同步的过程存在时间延迟</p><h2 id="最终一致性-EventuallyConsistent"><a href="#最终一致性-EventuallyConsistent" class="headerlink" title="最终一致性(EventuallyConsistent)"></a>最终一致性(EventuallyConsistent)</h2><p>系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BASE理论是对CAP理论中一致性和可用性权衡的结果，如果无法做到强一致性，那就要采取合适的方法使系统达到最终一致性。传统的数据库系统要求强一致性(ACID)，BASE理论强调通过牺牲强一致性来达到可用性。在实际业务场景中，要结合业务对一致性的要求，将ACID和BASE结合起来使用。&lt;/p&gt;
&lt;h2 id=&quot;基本可用-BasicallyAvailable&quot;&gt;&lt;a href=&quot;#基本可用-BasicallyAvailable&quot; class=&quot;headerlink&quot; title=&quot;基本可用(BasicallyAvailable)&quot;&gt;&lt;/a&gt;基本可用(BasicallyAvailable)&lt;/h2&gt;&lt;p&gt;分布式系统在出现故障的时候，保证核心功能可用，允许损失部分可用性。&lt;/p&gt;
&lt;h2 id=&quot;软状态-SoftState&quot;&gt;&lt;a href=&quot;#软状态-SoftState&quot; class=&quot;headerlink&quot; title=&quot;软状态(SoftState)&quot;&gt;&lt;/a&gt;软状态(SoftState)&lt;/h2&gt;&lt;p&gt;允许系统中的数据存在中间状态，即系统不同节点的数据副本之间进行同步的过程存在时间延迟&lt;/p&gt;
&lt;h2 id=&quot;最终一致性-EventuallyConsistent&quot;&gt;&lt;a href=&quot;#最终一致性-EventuallyConsistent&quot; class=&quot;headerlink&quot; title=&quot;最终一致性(EventuallyConsistent)&quot;&gt;&lt;/a&gt;最终一致性(EventuallyConsistent)&lt;/h2&gt;&lt;p&gt;系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://masonnpe.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="BASE" scheme="https://masonnpe.github.io/tags/BASE/"/>
    
  </entry>
  
  <entry>
    <title>CAP理论</title>
    <link href="https://masonnpe.github.io/2018/10/22/%E5%88%86%E5%B8%83%E5%BC%8F/CAP%E7%90%86%E8%AE%BA/"/>
    <id>https://masonnpe.github.io/2018/10/22/分布式/CAP理论/</id>
    <published>2018-10-22T15:19:10.566Z</published>
    <updated>2018-10-22T15:19:29.244Z</updated>
    
    <content type="html"><![CDATA[<p>分布式系统不可能同时满足一致性(Consistency)、可用性(Availability)、分区容忍性(Partition Tolerance)，最多只能同时满足其中两项，这就是CAP理论。在分布式系统中分区容忍性必不可少，所以CAP理论实际上是要在可用性和一致性之间做取舍。</p><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>多个数据副本能保持一致，系统在执行数据更新操作之后能够从一致性状态转移到另一个一致性状态。如果系统的一个数据更新成功之后，所有用户都能够读取到最新的值，系统就被认为具有强一致性。</p><h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>分布式系统在面对各种异常时都可以提供正常服务，对于用户的每一个操作、请求总是能够在有限的时间内返回结果。</p><h2 id="分区容忍性"><a href="#分区容忍性" class="headerlink" title="分区容忍性"></a>分区容忍性</h2><p>分布式系统在遇到任何网络分区故障的时候，仍然能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障。网络分区指分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式系统不可能同时满足一致性(Consistency)、可用性(Availability)、分区容忍性(Partition Tolerance)，最多只能同时满足其中两项，这就是CAP理论。在分布式系统中分区容忍性必不可少，所以CAP理论实际上是要在可用性和一致性之间做取舍。&lt;/p&gt;
&lt;h2 id=&quot;一致性&quot;&gt;&lt;a href=&quot;#一致性&quot; class=&quot;headerlink&quot; title=&quot;一致性&quot;&gt;&lt;/a&gt;一致性&lt;/h2&gt;&lt;p&gt;多个数据副本能保持一致，系统在执行数据更新操作之后能够从一致性状态转移到另一个一致性状态。如果系统的一个数据更新成功之后，所有用户都能够读取到最新的值，系统就被认为具有强一致性。&lt;/p&gt;
&lt;h2 id=&quot;可用性&quot;&gt;&lt;a href=&quot;#可用性&quot; class=&quot;headerlink&quot; title=&quot;可用性&quot;&gt;&lt;/a&gt;可用性&lt;/h2&gt;&lt;p&gt;分布式系统在面对各种异常时都可以提供正常服务，对于用户的每一个操作、请求总是能够在有限的时间内返回结果。&lt;/p&gt;
&lt;h2 id=&quot;分区容忍性&quot;&gt;&lt;a href=&quot;#分区容忍性&quot; class=&quot;headerlink&quot; title=&quot;分区容忍性&quot;&gt;&lt;/a&gt;分区容忍性&lt;/h2&gt;&lt;p&gt;分布式系统在遇到任何网络分区故障的时候，仍然能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障。网络分区指分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://masonnpe.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="CAP" scheme="https://masonnpe.github.io/tags/CAP/"/>
    
  </entry>
  
</feed>
